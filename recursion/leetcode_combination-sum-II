// Playlist ref: https://www.youtube.com/playlist?list=PLgUwDviBIf0rQ6cnlaHRMuOp4H_D-7hwP

class Solution {

    private void findComb(List<List<Integer>> ans, int index, int[] candidates, int target, List<Integer> tempList){
        if(target == 0){
            ans.add(new ArrayList(tempList));
            return;
        }

        for(int i=index; i<candidates.length; i++){
            if( i > index && candidates[i] == candidates[i-1])
                continue;
            if(candidates[i]>target)
                break;

            tempList.add(candidates[i]);
            findComb(ans, i + 1, candidates, target - candidates[i], tempList);
            tempList.remove(tempList.size()-1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList();
        Arrays.sort(candidates);
        findComb(ans, 0, candidates, target, new ArrayList());

        return ans;
    }
}