// Playlist ref: https://www.youtube.com/playlist?list=PLgUwDviBIf0rQ6cnlaHRMuOp4H_D-7hwP

class Solution {

    private void findCombinations(List<List<Integer>> ansList, int[] candidates, int index, int target, List<Integer> tempList ){
        if(index == candidates.length){
            if(target == 0){
                ansList.add(new ArrayList(tempList));
            }
            return;
        }

        if(candidates[index]<=target){
            tempList.add(candidates[index]);
            findCombinations(ansList, candidates,  index, target - candidates[index], tempList );
            tempList.remove(tempList.size()-1);
        }
        findCombinations(ansList, candidates,  index+1, target , tempList );
    }

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ansList = new ArrayList();
        findCombinations(ansList, candidates, 0, target, new ArrayList());
        return ansList;
    }
}